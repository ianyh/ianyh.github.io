<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bias and Sandwiches]]></title>
  <link href="http://ianyh.github.io/atom.xml" rel="self"/>
  <link href="http://ianyh.github.io/"/>
  <updated>2013-06-06T11:45:05-04:00</updated>
  <id>http://ianyh.github.io/</id>
  <author>
    <name><![CDATA[Ian Ynda-Hummel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Accessibility, Windows, and Spaces in OS X]]></title>
    <link href="http://ianyh.github.io/blog/2013/06/05/accessibility/"/>
    <updated>2013-06-05T09:58:00-04:00</updated>
    <id>http://ianyh.github.io/blog/2013/06/05/accessibility</id>
    <content type="html"><![CDATA[<p>A couple weeks ago I decided to sit down and write a tiling window manager. As a
first and second pass it pretty much works, though there&rsquo;s definitely room for
improvement. I&rsquo;m calling it <a href="https://github.com/ianyh/Amethyst">Amethyst</a>. (It&rsquo;s
a kind of quartz, you see. Get it? <em>Get it</em>?)</p>

<p>The first pass dealt with multiple screens fairly well as I was implementing it
at a desk with multiple screens and managing windows across screen is a simple
matter of position. It wasn&rsquo;t until I started trying it out on my laptop that I
realized that Spaces support was fairly key. There&rsquo;s just not enough room on
this 13&#8221; screen. I spent a long time digging into moving windows between spaces
and have some insights I couldn&rsquo;t find anywhere else and I thought I&rsquo;d share
them here.</p>

<!--more-->


<h1>Spaces API</h1>

<p>It used to be the case that there was a public API for moving windows between
spaces. They went private in 10.7, I think. There&rsquo;s a couple projects around
that utilize the private APIs, but I didn&rsquo;t want to go that route. For one thing
it might be nice to toss something into the AppStore, but it&rsquo;s mostly a
stability problem in that I don&rsquo;t want to have to go back and entirely
reimplement parts of the code due to radically shifting private APIs.</p>

<p>In my searching I dug into a variety of possible paths. I eventually came upon a
fascinating tidbit of information.</p>

<blockquote><p>If the mouse has hold of a window, switching to a Space via Mission Control
will take the window to that Space.</p></blockquote>

<p>Intriguing! You can test it out if you like. Works like a charm when you do it
manually. So how do we do it programmatically? Well, we manually post keyboard
and mouse events!</p>

<h1>CGEvents</h1>

<p>A quick overview of how <code>CGEvent</code> works. My use of it is mostly centered around
the following method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">void</span> <span class="n">CGEventPost</span><span class="p">(</span><span class="n">CGEventTapLocation</span> <span class="n">tap</span><span class="p">,</span> <span class="n">CGEventRef</span> <span class="n">event</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows you to post events directly to the window server. Great. So that
should let us post mouse events and keyboard events. So let&rsquo;s take a look at the
parameters.</p>

<p>The first is the tap location, of which there are three possible values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">enum</span> <span class="n">_CGEventTapLocation</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">kCGHIDEventTap</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>   <span class="n">kCGSessionEventTap</span><span class="p">,</span>
</span><span class='line'>   <span class="n">kCGAnnotatedSessionEventTap</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>kCGHIDEventTap</code> is the one we want. From the documentation:</p>

<blockquote><p>Specifies that an event tap is placed at the point where HID system events
enter the window server.</p></blockquote>

<p><code>kCGSessionEventTap</code> includes remote control events and stuff, and
<code>kCGAnnotatedSessionEventTap</code> is for sending events to specific applications.</p>

<p>The second parameter is a <code>CGEventRef</code>, which describes things like keyboard
modifier flags, mouse button, mouse state, mouse position, keyboard key codes,
etc. There are a variety of methods that can be used to create <code>CGEvent</code>
objects. The two we care about are <code>CGEventCreateMouseEvent</code> and
<code>CGEventCreateKeyboardEvent</code>.</p>

<h2>CGEventCreateMouseEvent</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">CGEventRef</span> <span class="nf">CGEventCreateMouseEvent</span><span class="p">(</span><span class="n">CGEventSourceRef</span> <span class="n">source</span><span class="p">,</span> <span class="n">CGEventType</span> <span class="n">mouseType</span><span class="p">,</span> <span class="n">CGPoint</span> <span class="n">mouseCursorPosition</span><span class="p">,</span> <span class="n">CGMouseButton</span> <span class="n">mouseButton</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the name implies this method is used to create mouse events. <code>source</code> is
basically meaningless for our purposes as it used for generating new events from
existing ones. <code>mouseCursorPosition</code> is pretty straightforward. It&rsquo;s the the
point on the screen that the mouse event should happen at.</p>

<p>There are a bunch of <code>CGEventType</code> values, which themselves are just proxies for
values buried deep in the HID system. The ones we care about for mouse events
are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">kCGEventLeftMouseDown</span> <span class="o">=</span> <span class="n">NX_LMOUSEDOWN</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kCGEventLeftMouseUp</span> <span class="o">=</span> <span class="n">NX_LMOUSEUP</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kCGEventMouseMoved</span> <span class="o">=</span> <span class="n">NX_MOUSEMOVED</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a couple <code>CGMouseButton</code> values as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">kCGMouseButtonLeft</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kCGMouseButtonRight</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kCGMouseButtonCenter</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>To simulate a standard tap we just want <code>kCGMouseButtonLeft</code>. To actually
simulate a tap we can do something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">CGPoint</span> <span class="n">point</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'><span class="n">CGEventRef</span> <span class="n">mouseMoveEvent</span> <span class="o">=</span> <span class="n">CGEventCreateMouseEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kCGEventMouseMoved</span><span class="p">,</span> <span class="n">point</span><span class="p">,</span> <span class="n">kCGMouseButtonLeft</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventRef</span> <span class="n">mouseDownEvent</span> <span class="o">=</span> <span class="n">CGEventCreateMouseEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kCGEventLeftMouseDown</span><span class="p">,</span> <span class="n">point</span><span class="p">,</span> <span class="n">kCGMouseButtonLeft</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventRef</span> <span class="n">mouseUpEvent</span> <span class="o">=</span> <span class="n">CGEventCreateMouseEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kCGEventLeftMouseUp</span><span class="p">,</span> <span class="n">point</span><span class="p">,</span> <span class="n">kCGMouseButtonLeft</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">mouseMoveEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">mouseDownEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">mouseUpEvent</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">mouseMoveEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">mouseDownEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">mouseUpEvent</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>to simulate a tap at (0, 0). Cool. Let&rsquo;s look at keyboard events.</p>

<h2>CGEventCreateKeyboardEvent</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">CGEventRef</span> <span class="nf">CGEventCreateKeyboardEvent</span><span class="p">(</span><span class="n">CGEventSourceRef</span> <span class="n">source</span><span class="p">,</span> <span class="n">CGKeyCode</span> <span class="n">virtualKey</span><span class="p">,</span> <span class="n">bool</span> <span class="n">keyDown</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>source</code> is about as useful here as it was for mouse events, and hopefully
<code>keyDown</code> is self explanatory. The important thing to note is that to perform a
keypress we actually need two events: one for <code>keyDown = true</code> followed by one
for <code>keyDown = false</code>.</p>

<p><code>virtualKey</code> can probably take its values from a variety of places. I went with
the virtual keycodes defined in the Carbon framework. It&rsquo;s
<code>Carbon.framework/Frameworks/HIToolbox.framework/Events.h</code> if you want to look
them up. Repeating them all here isn&rsquo;t particularly useful.</p>

<p>So let&rsquo;s say we want to perform the standard keyboard shortcut for moving one
space to the right (^ + Right Arrow). We could do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">CGEventRef</span> <span class="n">keyboardDownEvent</span> <span class="o">=</span> <span class="n">CGEventCreateKeyboardEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kVK_RightArrow</span><span class="p">,</span> <span class="n">true</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventRef</span> <span class="n">keyboardUpEvent</span> <span class="o">=</span> <span class="n">CGEventCreateKeyboardEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kVK_RightArrow</span><span class="p">,</span> <span class="n">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">keyboardDownEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">keyboardUpEvent</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">keyboardDownEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">keyboardUpEvent</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>But wait, what about the control key? Well, there&rsquo;s a method for that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">void</span> <span class="nf">CGEventSetFlags</span><span class="p">(</span><span class="n">CGEventRef</span> <span class="n">event</span><span class="p">,</span> <span class="n">CGEventFlags</span> <span class="n">flags</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>flags</code> is some OR&rsquo;d combination of possible flag values. The ones we care
about here are</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/* Device-independent modifier key bits. */</span>
</span><span class='line'>  <span class="n">kCGEventFlagMaskAlphaShift</span> <span class="o">=</span>          <span class="n">NX_ALPHASHIFTMASK</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kCGEventFlagMaskShift</span> <span class="o">=</span>               <span class="n">NX_SHIFTMASK</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kCGEventFlagMaskControl</span> <span class="o">=</span>             <span class="n">NX_CONTROLMASK</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kCGEventFlagMaskAlternate</span> <span class="o">=</span>           <span class="n">NX_ALTERNATEMASK</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kCGEventFlagMaskCommand</span> <span class="o">=</span>             <span class="n">NX_COMMANDMASK</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So to fix the keyboard event code from above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">CGEventRef</span> <span class="n">keyboardDownEvent</span> <span class="o">=</span> <span class="n">CGEventCreateKeyboardEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kVK_RightArrow</span><span class="p">,</span> <span class="n">true</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventRef</span> <span class="n">keyboardUpEvent</span> <span class="o">=</span> <span class="n">CGEventCreateKeyboardEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kVK_RightArrow</span><span class="p">,</span> <span class="n">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGEventSetFlags</span><span class="p">(</span><span class="n">keyboardDownEvent</span><span class="p">,</span> <span class="n">kCGEventFlagMaskControl</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">keyboardDownEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">keyboardUpEvent</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">keyboardDownEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">keyboardUpEvent</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Putting It All Together</h2>

<p>So let&rsquo;s say you have an accessibility reference to a window and want to move it
to a different space. There&rsquo;s an important question you need to answer first: at
what point do you move the mouse to grab the window? Conceptually the answer is
pretty straightforward. You move the mouse to the window&rsquo;s toolbar. In practice
there&rsquo;s a couple unintuitive gotchas.</p>

<p>My initial intuition for this was to take the min-y and mid-x of the window&rsquo;s
frame, so the cursor ends up in the middle of the window&rsquo;s toolbar. Should work
fine, should work with every window. But when I implemented that it would fail
for some windows, namely Xcode. As best I can tell the middle of Xcode&rsquo;s toolbar
as depicted below is grabbing mouse down events for something.</p>

<p><img class="center" src="http://ianyh.github.io/images/2013-05-29-accessibility/xcode-toolbar.png"></p>

<p>Okay, so what other point on the x-axis do all windows have in common? That
little green zoom button!</p>

<h2>But Wait, What About Modifiers?</h2>

<p>There is one more point to consider. We are going to be executing this operation
from an event handler triggered by a keyboard shortcut. Let&rsquo;s take an example
shortcut <code>ctrl + option + right arrow</code> for taking the currently focused window
and moving it one space right. You hit this keyboard shortcut and we go and
create events and post them. There&rsquo;s a gotcha here. <code>CGEvent</code> create methods
<em>start with the current modifiers unless otherwise specified</em>. Depending on the
timing we could accidentally create a <code>ctrl + click</code> event instead of just a
<code>click</code> event. Most windows don&rsquo;t care, but Xcode (why is it always Xcode?)
does. We need to thus make sure that we clear out any modifier flags on keyboard
and mouse events that we don&rsquo;t expect to have any modifiers.</p>

<h2>The Final Method</h2>

<p>To avoid unnecessary details of the accessibility API the following code uses an
<code>NSObject</code> wrapper.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">AMAccessibilityElement</span> <span class="o">*</span><span class="n">windowElement</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">window</span><span class="p">];</span>
</span><span class='line'><span class="n">AMAccessibilityElement</span> <span class="o">*</span><span class="n">zoomButtonElement</span> <span class="o">=</span> <span class="p">[</span><span class="n">windowElement</span> <span class="nl">elementForKey:</span><span class="n">kAXZoomButtonAttribute</span><span class="p">];</span>
</span><span class='line'><span class="n">CGRect</span> <span class="n">zoomButtonFrame</span> <span class="o">=</span> <span class="n">zoomButtonElement</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="n">CGRect</span> <span class="n">windowFrame</span> <span class="o">=</span> <span class="n">windowElement</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">mouseCursorPoint</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">CGRectGetMaxX</span><span class="p">(</span><span class="n">zoomButtonFrame</span><span class="p">)</span> <span class="o">+</span> <span class="mf">5.0</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">windowFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="mf">5.0</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGEventRef</span> <span class="n">mouseMoveEvent</span> <span class="o">=</span> <span class="n">CGEventCreateMouseEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kCGEventMouseMoved</span><span class="p">,</span> <span class="n">mouseCursorPoint</span><span class="p">,</span> <span class="n">kCGMouseButtonLeft</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventRef</span> <span class="n">mouseDownEvent</span> <span class="o">=</span> <span class="n">CGEventCreateMouseEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kCGEventLeftMouseDown</span><span class="p">,</span> <span class="n">mouseCursorPoint</span><span class="p">,</span> <span class="n">kCGMouseButtonLeft</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventRef</span> <span class="n">mouseUpEvent</span> <span class="o">=</span> <span class="n">CGEventCreateMouseEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kCGEventLeftMouseUp</span><span class="p">,</span> <span class="n">mouseCursorPoint</span><span class="p">,</span> <span class="n">kCGMouseButtonLeft</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGEventRef</span> <span class="n">keyboardDownEvent</span> <span class="o">=</span> <span class="n">CGEventCreateKeyboardEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kVK_RightArrow</span><span class="p">,</span> <span class="n">true</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventRef</span> <span class="n">keyboardUpEvent</span> <span class="o">=</span> <span class="n">CGEventCreateKeyboardEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kVK_RightArrow</span><span class="p">,</span> <span class="n">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGEventSetFlags</span><span class="p">(</span><span class="n">mouseMoveEvent</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventSetFlags</span><span class="p">(</span><span class="n">mouseDownEvent</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventSetFlags</span><span class="p">(</span><span class="n">mouseUpEvent</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventSetFlags</span><span class="p">(</span><span class="n">keyboardDownEvent</span><span class="p">,</span> <span class="n">kCGEventFlagMaskControl</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventSetFlags</span><span class="p">(</span><span class="n">keyboardUpEvent</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">kCGHIDEventTap</span><span class="p">,</span> <span class="n">mouseMoveEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">kCGHIDEventTap</span><span class="p">,</span> <span class="n">mouseDownEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">kCGHIDEventTap</span><span class="p">,</span> <span class="n">keyboardDownEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">kCGHIDEventTap</span><span class="p">,</span> <span class="n">keyboardUpEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CGEventPost</span><span class="p">(</span><span class="n">kCGHIDEventTap</span><span class="p">,</span> <span class="n">mouseUpEvent</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">mouseMoveEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">mouseDownEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">mouseUpEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">keyboardEvent</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">keyboardEventUp</span><span class="p">);</span>                           
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
